[["./output//chap-26/cg-b-glossary.md", "---\ntitle: \"26.1 Glossary\"\n---\n\n# 26.1 Glossary\n\nimport CgBGlossary from './cg-b-glossary/_cg-b-glossary.md';\n\n<CgBGlossary />"], ["./output//chap-26/cg-b-glossary/intro.md", "--- title: 26.1 Glossary - Introduction sidebar_position: 0 --- Each entry in this glossary has the following parts: *\u2022* the term being defined, set in boldface. *\u2022* optional pronunciation, enclosed in square brackets and set in boldface, as in the following example: [ **a list** ]. The pronunciation key follows *Webster\u2019s Third New International Dictionary the English Language, Unabridged*, except that \u201c* \u201d is used to notate the schwa (upside-down \u201ce\u201d) character. *\u2022* the part or parts of speech, set in italics. If a term can be used as several parts of speech, there is a separate definition for each part of speech. *\u2022* one or more definitions, organized as follows: \u2013 an optional number, present if there are several definitions. Lowercase letters might also be used in cases where subdefinitions of a numbered definition are necessary. \u2013 an optional part of speech, set in italics, present if the term is one of several parts of speech. \u2013 an optional discipline, set in italics, present if the term has a standard definition being repeated. For example, \u201c*Math.*\u201d \u2013 an optional context, present if this definition is meaningful only in that context. For example, \u201c(of a *symbol*)\u201d. \u2013 the definition. \u2013 an optional example sentence. For example, \u201cThis is an example of an example.\u201d \u2013 optional cross references. In addition, some terms have idiomatic usage in the Common Lisp community which is not shared by other communities, or which is not technically correct. Definitions labeled \u201c*Idiom.*\u201d represent such idiomatic usage; these definitions are sometimes followed by an explanatory note. Words in *this font* are words with entries in the glossary. Words in example sentences do not follow this convention. When an ambiguity arises, the longest matching substring has precedence. For example, \u201c*complex float*\u201d refers to a single glossary entry for \u201c*complex float*\u201d rather than the combined meaning of the glossary terms \u201c*complex*\u201d and \u201c*float*.\u201d Subscript notation, as in \u201c<i>something<sub>n</sub></i>\u201d means that the <i>n</i>th definition of \u201c<i>something</i>\u201d is intended. This notation is used only in situations where the context might be insufficient to disambiguate. The following are abbreviations used in the glossary: |**Abbreviation** |**Meaning**| | :-: | :- | |<p>*adj.* </p><p>*adv.* </p><p>*ANSI* </p><p>*Comp.* </p><p>*Idiom.* </p><p>*IEEE* </p><p>*ISO* </p><p>*Math.* </p><p>*Trad.* </p><p>*n.* </p><p>*v.* </p><p>*v.t.* </p>|<p>adjective </p><p>adverb </p><p>compatible with one or more ANSI standards computers </p><p>idiomatic </p><p>compatible with one or more IEEE standards compatible with one or more ISO standards mathematics </p><p>traditional </p><p>noun </p><p>verb </p><p>transitive verb</p>|\n\n**Non-alphabetic**"], ["./output//chap-26/cg-b-glossary/i.md", "**Figure 26\u20132. Standardized I/O Customization Variables** \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n  \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n  \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n**Figure 26\u20133. Standardized Iteration Forms**"], ["./output//chap-26/cg-b-glossary/_cg-b-glossary.md", "Each entry in this glossary has the following parts: \n\n\n\n*\u2022* the term being defined, set in boldface. \n\n\n\n*\u2022* optional pronunciation, enclosed in square brackets and set in boldface, as in the following example: [ **a list** ]. The pronunciation key follows *Webster\u2019s Third New International Dictionary the English Language, Unabridged*, except that \u201c* \u201d is used to notate the schwa (upside-down \u201ce\u201d) character. \n\n\n\n*\u2022* the part or parts of speech, set in italics. If a term can be used as several parts of speech, there is a separate definition for each part of speech. \n\n\n\n*\u2022* one or more definitions, organized as follows: \n\n\n\n\u2013 an optional number, present if there are several definitions. Lowercase letters might also be used in cases where subdefinitions of a numbered definition are necessary. \n\n\n\n\u2013 an optional part of speech, set in italics, present if the term is one of several parts of speech. \n\n\n\n\u2013 an optional discipline, set in italics, present if the term has a standard definition being repeated. For example, \u201c*Math.*\u201d \n\n\n\n\u2013 an optional context, present if this definition is meaningful only in that context. For example, \u201c(of a *symbol*)\u201d. \n\n\n\n\u2013 the definition. \n\n\n\n\u2013 an optional example sentence. For example, \u201cThis is an example of an example.\u201d \u2013 optional cross references. \n\n\n\nIn addition, some terms have idiomatic usage in the Common Lisp community which is not shared by other communities, or which is not technically correct. Definitions labeled \u201c*Idiom.*\u201d represent such idiomatic usage; these definitions are sometimes followed by an explanatory note. \n\n\n\nWords in *this font* are words with entries in the glossary. Words in example sentences do not follow this convention. \n\n\n\nWhen an ambiguity arises, the longest matching substring has precedence. For example, \u201c*complex float*\u201d refers to a single glossary entry for \u201c*complex float*\u201d rather than the combined meaning of the glossary terms \u201c*complex*\u201d and \u201c*float*.\u201d \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nSubscript notation, as in \u201c<i>something<sub>n</sub></i>\u201d means that the <i>n</i>th definition of \u201c<i>something</i>\u201d is intended. This notation is used only in situations where the context might be insufficient to disambiguate. \n\n\n\nThe following are abbreviations used in the glossary: \n\n\n\n\n|**Abbreviation**\n |**Meaning**|\n\n| :-: | :- |\n\n|<p>*adj.* </p><p>*adv.* </p><p>*ANSI* </p><p>*Comp.* </p><p>*Idiom.* </p><p>*IEEE* </p><p>*ISO* </p><p>*Math.* </p><p>*Trad.* </p><p>*n.* </p><p>*v.* </p><p>*v.t.* </p>|<p>adjective </p><p>adverb </p><p>compatible with one or more ANSI standards computers </p><p>idiomatic </p><p>compatible with one or more IEEE standards compatible with one or more ISO standards mathematics </p><p>traditional </p><p>noun </p><p>verb </p><p>transitive verb</p>|\n\n\n\n\n\n**Non-alphabetic** \n\n\n\n \n\n\n\n**A** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\ncharacteristics by direct modification. A *conforming program* may depend on an *array* being *actually adjustable* only if either that *array* is known to have been *expressly adjustable* or if that *array* has been explicitly tested by **adjustable-array-p**. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*uninterned symbol* might or might not be an *uninterned symbol*. *Uninterned symbols* have a *home package* of **nil**, but *symbols* which have been *uninterned* from their *home package* also have a *home package* of **nil**, even though they might still be *interned* in some other *package*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n**B** \n\n\n\n \n\n\n\n\u201cbackquote\u201d (\u2018). See Figure 2\u20135. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*subtype* of *type* **integer**. The most fundamental operation on a *binary input stream* is **read-byte** and on a *binary output stream* is **write-byte**. See *character* . 2. (of a *file*) having been created by opening a *binary stream*. (It is *implementation-dependent* whether this is an detectable aspect of the *file*, or whether any given *character file* can be treated as a *binary file*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nsymbol **t** (representing *true*), or the symbol **nil** (representing *false*). See *generalized boolean*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*declaration* refers to a *dynamic variable binding*, the *scope* of the *declaration* is what the *scope* of the *binding* would have been if it were lexical rather than dynamic.) \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nbounding index\u201d, such that 0 <i>\u2264 i<sub>start</sub> \u2264 i<sub>end</sub> \u2264 n</i>, and which therefore delimit a subrange of the <i>sequence bounded</i> by <i>i<sub>start</sub></i> and <i>i<sub>end</sub></i>. \n\n\n\n \n\n\n\nitself) and **nil** (denoting the *length* of the *sequence*), or two *integers* (each denoting themselves). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**C** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*environment* in which the *form* that defined the *initialization form* was *evaluated*. \u201cEach newly added shared slot is set to the result of evaluating the captured \n\n\n\ninitialization form for the slot that was specified in the **defclass** form for the new class.\u201d \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n:invert. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nnon-negative *integer* less than the *value* of **char-code-limit** that is suitable for use as a *character code*<sub>1</sub>. \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*component*, *element*, *constituent*<sub>2</sub>, or *subexpression* (as appropriate to the context) that is the *object* itself. \n\n\n\n \n\n\n\n \n\n\n\nclass **number**.\u201d (Note that the phrase \u201cthe *class* foo\u201d is often substituted for the more precise phrase \u201cthe *class* named foo\u201d\u2014in both cases, a *class object* (not a *symbol*) is denoted.) 2. (of an *object*) the uniquely determined *class* of which the *object* is a *direct instance*. See the *function* **class-of**. \u201cThe class of the object returned by **gensym** is **symbol**.\u201d (Note that with this usage a phrase such as \u201cits *class* is foo\u201d is often substituted for the more precise phrase \u201cits *class* is the *class* named foo\u201d\u2014in both cases, a *class object* (not a *symbol*) is denoted.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nTerminology). \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nrather than a *complex*\u2014see Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\noptimizing one or more qualities of the code, such as run-time speed of *execution* or run-time storage usage. The minimum semantic requirements of compilation are that it must remove all macro calls and arrange for all *load time values* to be resolved prior to run time. 2. (a *function*) to produce a new *object* of *type* **compiled-function** which represents the result of *compiling* the *code* represented by the *function*. See the *function* **compile**. 3. (a *source file*) to produce a *compiled file* from a *source file*. See the *function* **compile-file**. \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*implementation-dependent* form that might be represented or *executed* efficiently. The functions **compile** and **compile-file** permit programs to invoke the *compiler* . \n\n\n\n \n\n\n\nwhich might perform some additional optimizations. (Unlike a *macro*, a *compiler macro* does not extend the syntax of Common Lisp; rather, it provides an alternate implementation strategy for some existing syntax or functionality.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*environment*, that implements *compiler macro expansion* by producing either a *form* to be used in place of the original argument *form* or else **nil**, indicating that the original *form* should not be replaced. See Section 3.2.2.1 (Compiler Macros). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nrequirements of this specification. See Section 1.5 (Conformance). \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nprovided that no extension interferes with the correct function of any *conforming program*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nis, a *keyword* <sub>1</sub> or a *named constant*. \u201cThe symbols **t**, **nil**, :direction, and \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\narithmetic on mixed *types* of *numbers*) produce a result whose *type* is controlled by the dominance of one *argument*\u2019s *type* over the *types* of the other *arguments*. See Section 12.1.1.2 (Contagion in Numeric Operations). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*leaves* as *T*. See the *function* **copy-tree**. 5. (of a *random state R*) a *fresh random state* that, if used as an argument to to the *function* **random** would produce the same series of \u201crandom\u201d values as *R* would produce. 6. (of a *structure S*) a *fresh structure* that has the same *type* as *S*, and that has slot values, each of which is the *same* as the corresponding slot value of *S*. (Note that since the difference between a *cons*, a *list*, and a *tree* is a matter of \u201cview\u201d or \u201cintention,\u201d there can be no general-purpose *function* which, based solely on the *type* of an *object*, can determine which of these distinct meanings is intended. The distinction rests solely on the basis of the text description within this document. For example, phrases like \u201ca *copy* of the given *list*\u201d or \u201ccopy of the *list x*\u201d imply the second definition.) \n\n\n\n \n\n\n\nassociated with the *error* ) capable of being corrected by invoking that *restart*. \u201cThe function **cerror** signals an error that is correctable by the **continue** *restart*.\u201d (Note that correctability is not a property of an *error object*, but rather a property of the *dynamic environment* that is in effect when the *error* is *signaled*. Specifically, the *restart* is \u201cassociated with\u201d the *error condition object*. See Section 9.1.4.2.4 (Associating a Restart with a Condition).) 2. (when no specific *restart* is mentioned) *correctable*<sub>1</sub> by at least one *restart*. \u201c**import** signals a correctable error of *type* **package-error** if any of the imported symbols has the same name as some distinct symbol already accessible in the package.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**D** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nargument *names* and *values* in which unsupplied initialization arguments are \n\n\n\ndefaulted, used in the protocol for initializing and reinitializing *instances* of *classes*. \n\n\n\n \n\n\n\nby the :arguments option to **define-method-combination**. See Section 3.4.10 \n\n\n\n(Define-method-combination Arguments Lambda Lists). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\u201cdenormalized\u201d as described by *IEEE Standard for Binary Floating-Point Arithmetic*. For example, in an *implementation* where the minimum possible exponent was -7 but where 0.001 was a valid mantissa, the number 1.0e-10 might be representable as 0.001e-7 internally even if the *normalized* representation would call for it to \n\n\n\nbe represented instead as 1.0e-10 or 0.1e-9. By their nature, *denormalized floats* generally have less precision than *normalized floats*. \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nanother *type specifier* . **deftype** defines *derived types*, and there may be other \n\n\n\n*implementation-defined operators* which do so as well. \n\n\n\n \n\n\n\n \n\n\n\nalready occurred; that is, that the *parameter* is already of the denoted *type*. For more detailed information, see Section 1.4.1.5 (Designators). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nwith *dynamic extent*. A *dynamic environment* contains, among other things: *exit points* established by **unwind-protect**, and *bindings* of *dynamic variables*, *exit points* established by **catch**, *condition handlers*, and *restarts*. \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**E** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*stream*) a *character* or *number* (as appropriate to the *element type* of the *stream*) that is among the ordered series of *objects* that can be read from the *stream* (using **read-char** or **read-byte**, as appropriate to the *stream*). 6. (of an *output stream*) a \n\n\n\n*character* or *number* (as appropriate to the *element type* of the *stream*) that is among the ordered series of *objects* that has been or will be written to the *stream* (using **write-char** or **write-byte**, as appropriate to the *stream*). 7. (of a *class*) a *generalized instance* of the *class*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nnumber is to be represented as a double float.\u201d \n\n\n\n|**Marker Meaning**|\n\n| :- |\n\n|<p>D or d **double-float** </p><p>E or e **float** (see **\\*read-default-float-format\\***) </p><p>F or f **single-float** </p><p>L or l **long-float** </p><p>S or s **short-float**</p>|\n\n\n\n\n\n**Figure 26\u20131. Exponent Markers** \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*element type* at its time of creation, prior to any selection of an *upgraded array element type*. (Common Lisp does not provide a way of detecting this *type* directly at run time, but an *implementation* is permitted to make assumptions about the *array*\u2019s contents and the operations which may be performed on the *array* when this *type* is noted during code analysis, even if those assumptions would not be valid in general for the *upgraded array element type* of the *expressed array element type*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\npurpose, but offering additional syntax or functionality not available in an *ordinary lambda list*. \u201c**defmacro** uses extended lambda lists.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\ndetermines one of possibly several *implementation-dependent* ways in which *characters* are encoded externally in a *character file*. \n\n\n\n \n\n\n\n:default (denoting an *implementation-dependent* default *external file format* that can accomodate at least the *base characters*), some other *object* defined by the \n\n\n\n*implementation* to be an *external file format designator* (denoting an *implementation defined external file format*), or some other *object* defined by the *implementation* to be an *external file format* (denoting itself). \n\n\n\n \n\n\n\n \n\n\n\n**F** \n\n\n\n \n\n\n\n \n\n\n\nthere is a such a definition of a *setf expander F*, the *function* (setf *F*) can be *fbound* if and only if, by design or coincidence, a function binding for (setf *F*) has been independently established.) See the *functions* **fboundp** and **symbol-function**. \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nfollowing the last *element* of the *stream*), or a *file position* (denoting itself). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n(integer 0 5) denotes a finite type, but the type specifiers **integer** and (integer 0) do not.\u201d \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*function* **format**. \u201cIn \"&#126;D base 10 = &#126;8R\", the character sequences \u2018&#126;D\u2019 and \u2018&#126;8R\u2019 are format directives.\u201d 2. the conceptual category of all *format directives*<sub>1</sub> which use the same dispatch character. \u201cBoth \"&#126;3d\" and \"&#126;3,\u20190D\" are valid uses of the \u2018&#126;D\u2019 format directive.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nits *function block name* is the *symbol* that is the *cadr* of the *function name*. An *implementation* which supports additional kinds of *function names* must specify for each how the corresponding *function block name* is computed. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*symbol* as a *function designator* nor a use of the *function* **symbol-function** to extract the *functional value* of a *symbol* is considered a *functional evaluation*. \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\ncontents of the *function cell* named *N* in *environment E*. 2. (of an *fbound symbol S*) the contents of the *symbol*\u2019s *function cell*; that is, the *value* of the *binding* named *S* in the *function namespace* of the *global environment*. (A *name* that is a *macro name* in the *global environment* or is a *special operator* might or might not be *fbound*. But if *S* is such a *name* and is *fbound*, the specific nature of its *functional value* is *implementation-dependent*; in particular, it might or might not be a *function*.) \n\n\n\n \n\n\n\n**G** \n\n\n\n \n\n\n\n \n\n\n\nrepresents *false* and all other *objects* represent *true*. See *boolean*. \n\n\n\n \n\n\n\n \n\n\n\n*variable*. (Such a reference can be either to *read* or *write* the location.) See Section 5.1 (Generalized Reference). See also *place*. \n\n\n\n \n\n\n\n*generalized synonym stream* to the *stream*. 2. (to a *symbol*) a *synonym stream* to the *symbol*, or a *composite stream* which has as a target a *generalized synonym stream* to the *symbol*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**H** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**I** \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n|<p>\\*debug-io\\* \\*error-io\\* query-io\\* </p><p>\\*standard-input\\* \\*standard-output\\* \\*trace-output\\*</p>|\n\n| :- |\n\n\n\n\n\n**Figure 26\u20132. Standardized I/O Customization Variables** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nmodification are undefined. \u201cNumbers are immutable.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nspecification to be defined by each *conforming implementation* and to be documented by the corresponding implementor. \n\n\n\n \n\n\n\nLisp which has been deliberately left unspecified, that might be defined in some \n\n\n\n*conforming implementations* but not in others, and whose details may differ between *implementations*. A *conforming implementation* is encouraged (but not required) to document its treatment of each item in this specification which is marked \n\n\n\n*implementation-dependent*, although in some cases such documentation might simply identify the item as \u201cundefined.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nquerying. See Section 21.1.1.1.3 (Interactive Streams). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*implementation-dependent* base. See Section 25.1.4.3 (Internal Time). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n|<p>**do do-external-symbols dotimes do\\* do-symbols loop** </p><p>**do-all-symbols dolist**</p>|\n\n| :- |\n\n\n\n\n\n**Figure 26\u20133. Standardized Iteration Forms** \n\n\n\n \n\n\n\n**K** \n\n\n\n \n\n\n\n \n\n\n\nany *symbol*, usually but not necessarily in the KEYWORD *package*, that is used as an identifying marker in keyword-style argument passing. See **lambda**. 3. *Idiom.* a *lambda list keyword*. \n\n\n\n \n\n\n\n \n\n\n\n**L** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nparenthesis\u201d or \u201copen parenthesis\u201d See Figure 2\u20135. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nordinary *bindings* of *variable names* to *values*, lexically *established bindings* of *function names* to *functions*, *macros*, *symbol macros*, *blocks*, *tags*, and *local declarations* (see **declare**). \n\n\n\n \n\n\n\nestablishing *form*. \u201cThe names of parameters to a function normally are lexically scoped.\u201d \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nan operating system is technically orthogonal to the issue of a *Lisp image* being defined here. Depending on the operating system, a single \u201cprocess\u201d might have multiple *Lisp images*, and multiple \u201cprocesses\u201d might reside in a single *Lisp image*. Hence, it is the idea of a fully shared address space for direct reference among all *objects* which is the defining characteristic. Note, too, that two \u201cprocesses\u201d which have a communication \n\n\n\narea that permits the sharing of some but not all *objects* are considered to be distinct *Lisp images*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nrun-time *environment*. In the case of *file compilation*, the *value* is computed once as part of the process of *loading* the *compiled file*, and not again. See the *special operator* **load-time-value**. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nis defined by the *implementation* to be *lowercase*. See Section 13.1.4.3 (Characters With Case). \n\n\n\n**M** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nabstraction, information hiding, or syntactic convenience); that is, either a *compound form* whose first element is a *macro name*, or a *form* that is a *symbol* that names a *symbol macro*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\npurpose, but which deviates in syntax or functionality from the definition of an \n\n\n\n*ordinary lambda list*. See *ordinary lambda list*. \u201c**deftype** uses a modified lambda list.\u201d \n\n\n\n \n\n\n\n*disestablished*) more recently than any other of its kind. \n\n\n\n \n\n\n\n \n\n\n\n**N** \n\n\n\n \n\n\n\nwhich is a symbol\u2019s name is returned by **symbol-name**.\u201d 4. *n.* (of a *pathname*) a. the name component, returned by **pathname-name**. b. the entire namestring, returned by **namestring**. 5. *n.* (of a *character* ) a *string* that names the *character* and that \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nhas *length* greater than one. (All *non-graphic characters* are required to have *names* unless they have some *implementation-defined attribute* which is not *null*. Whether or not other *characters* have *names* is *implementation-dependent*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*physical pathname*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nintent that no special effort should be made by *code* signaling an *error* to make that *error correctable*; however, there is no actual requirement on *conforming programs* or *conforming implementations* imposed by this term.) \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nCharacters). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\ninformation not present in the *global environment*, such as one or more *bindings*. \n\n\n\n \n\n\n\n \n\n\n\nconstituent *character* when it appears in the middle of an extended token. See Section 2.2 (Reader Algorithm). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\u201cnormalized\u201d as described by *IEEE Standard for Binary Floating-Point Arithmetic*. See *denormalized*. \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**O** \n\n\n\n \n\n\n\n \n\n\n\n\u201cThe operators **mapcar**, **maphash**, **with-package-iterator** and **count** perform \n\n\n\nobject-traversing operations.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nbe made *inaccessible* if *O*<sub>1</sub> were made *inaccessible*. (Every *object* is an *otherwise inaccessible part* of itself.) \n\n\n\n \n\n\n\n**P** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\ncomputational \u201cparallelism\u201d since the *forms* that produce *values* are evaluated \n\n\n\n*sequentially*. See *sequential*. \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\ndata flow by a *format directive* due to a prefix notation within the *format string* at the *format directive*\u2019s point of use. See Section 22.3 (Formatted Output). \u201cIn \"&#126;3,\u20190D\", the number 3 and the character #\\0 are parameters to the &#126;D format directive.\u201d \n\n\n\n \n\n\n\n*method* to be applicable only to *argument* sequences in which the corresponding \n\n\n\n*argument* matches the *parameter specializer* . 2. a *class*, or a *list* (eql *object*). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nconceptual location referred to by such a *place*<sub>1</sub>. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*object* onto a *stream* when the *value* of **\\*print-pretty\\*** is *true*, and that uses layout techniques (*e.g.*, indentation) that tend to highlight the structure of the *object* in a way that makes it easier for human readers to parse visually. See the *variable* **\\*print-pprint-dispatch\\*** and Section 22.2 (The Lisp Pretty Printer). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nor **\\*print-escape\\*** is *true*, then *printer escaping* is \u201cenabled\u201d; otherwise (if the values of both **\\*print-readably\\*** and **\\*print-escape\\*** are *false*), then *printer escaping* is \u201cdisabled\u201d. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\na *property list*, the first such pair determines the *property*. 2. (of a *symbol*) the component of the *symbol* containing a *property list*. \n\n\n\n \n\n\n\n \n\n\n\nexpresses intention to conform, regardless of whether the goal of that intention is realized in practice. For example, language implementations have been known to have bugs, and while an *implementation* of this specification with bugs might not be a *conforming implementation*, it can still *purport to conform*. This is an important distinction in certain specific cases; *e.g.*, see the *variable* **\\*features\\***. \n\n\n\n**Q** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**R** \n\n\n\n \n\n\n\n35, respectively. Case is not significant in parsing numbers of radix greater than 10, so \u201c9b8a\u201d and \u201c9B8A\u201d denote the same *radix* 16 number.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*characters* that defines special-purpose syntax for use by the *Lisp reader* , and that is implemented by a *reader macro function*. See Section 2.2 (Reader Algorithm). 2. the *character* or *characters* that introduce a *reader macro*<sub>1</sub>; that is, a *macro character* or the conceptual pairing of a *dispatching macro character* and the *character* that follows \n\n\n\nit. (A *reader macro* is not a kind of *macro*.) \n\n\n\n \n\n\n\nthat implements a *reader macro*<sub>2</sub>. See the *functions* **set-macro-character** and \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nPrinter). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nunits appropriate to that time. For example, a *relative internal time* is the difference between two *absolute internal times*, and is measured in *internal time units*. 2. (of a *pathname*) representing a position in a directory hierarchy by motion from a position other than the root, which might therefore vary. \u201cThe notation #P\"../foo.text\" \n\n\n\ndenotes a relative pathname if the host file system is Unix.\u201d See *absolute*. \n\n\n\n \n\n\n\nRepertoires). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nThe primary purpose of a *restart function* is to provide an alternate interface. By convention, a *restart function* usually has the same name as the *restart* which it invokes. Figure 26\u20134 shows a list of the *standardized restart functions*. \n\n\n\n|<p>**abort muffle-warning use-value** </p><p>**continue store-value**</p>|\n\n| :- |\n\n\n\n\n\n**Figure 26\u20134. Standardized Restart Functions** \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nparenthesis\u201d or \u201cclose parenthesis\u201d See Figure 2\u20135. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**S** \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*predicate*. \u201cThe symbol car, the string \"car\", and the string \"CAR\" are the same under **string-equal**\u201d. 2. (of *objects* if no predicate is implied by context) indistinguishable by **eql**. Note that **eq** might be capable of distinguishing some *numbers* and *characters* which **eql** cannot distinguish, but the nature of such, if any, is *implementation* \n\n\n\n*dependent*. Since **eq** is used only rarely in this specification, **eql** is the default predicate when none is mentioned explicitly. \u201cThe conses returned by two successive calls to **cons** are never the same.\u201d 3. (of *types*) having the same set of *elements*; that is, each *type* is a *subtype* of the others. \u201cThe types specified by (integer 0 1), (unsigned-byte 1), and bit are the same.\u201d \n\n\n\n \n\n\n\nof calling the *sequence function*\u2019s *key argument* on the *object* being considered. See Section 17.2.2 (Satisfying a One-Argument Test). 2. (for a two *argument* test) to be in a state such that the two-place *predicate* which is the *sequence function*\u2019s *test* \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n*argument* returns *true* when given a first *argument* that is the *object* being considered, and when given a second *argument* that is the result of calling the *sequence function*\u2019s *key argument* on an *element* of the *sequence function*\u2019s *sequence argument* which is being tested for equality; or to be in a state such that the *test-not function* returns *false* given the same *arguments*. See Section 17.2.1 (Satisfying a Two-Argument Test). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*self-evaluating object* is *evaluated*, it *yields* itself as its only *value*. \u201cStrings are \n\n\n\nself-evaluating objects.\u201d \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*situation* that is generally sufficiently severe that entry into the *debugger* should be expected if the *condition* is *signaled* but not *handled*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nrepresented by a *condition*, has been detected. See Section 9.1 (Condition System Concepts). \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nrequired *arguments*, and which also describes the *argument* conventions for its other, non-required *arguments*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*readtable*, *slash* is the only *single escape*.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nallocating certain kinds of *objects* that have *dynamic extent*. Such *objects* are allocated on the stack rather than in the heap so that their storage can be freed as part of unwinding the stack rather than taking up space in the heap until the next garbage collection. What *types* (if any) can have *dynamic extent* can vary from *implementation* to *implementation*. No *implementation* is ever required to perform stack-allocation. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nother *readtables*, must never be modified by any program. (Although the definite reference \u201cthe *standard readtable*\u201d is generally used within this document, it is \n\n\n\nactually *implementation-dependent* whether a single *object* fills the role of the *standard readtable*, or whether there might be multiple such objects, any one of which could be used on any given occasion where \u201cthe *standard readtable*\u201d is called for. As such, \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\nthis phrase should be seen as an indefinite reference in all cases except for anaphoric references.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nthe *target* of which is a *stream associated with a file*. Such a *stream* \n\n\n\ncannot be created with **make-two-way-stream**, **make-echo-stream**, \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*expression*. (In fact, the state of being a *subexpression* is not an attribute of the *subexpression*, but really an attribute of the containing *expression* since the *same object* can at once be a *subexpression* in one context, and not in another.) \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nmembership of another *type*, called a *supertype*. (Every *type* is a *subtype* of itself.) \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nthe *value* of its *synonym stream symbol*. 3. (to a *symbol*) a *synonym stream* which has the *symbol* as its *synonym stream symbol*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*implementation* and hence cannot be inherited by *classes* defined by *conforming* \n\n\n\n*programs*. \n\n\n\n \n\n\n\nspecification (*e.g.*, during method combination); that is, *code* that is not *programmer code*. \n\n\n\n**T** \n\n\n\n \n\n\n\nrepresenting true. (Although any *object* other than **nil** is considered *true* as a \n\n\n\n*generalized boolean*, t is generally used when there is no special reason to prefer one such *object* over another.) 2. the *name* of the *type* to which all *objects* belong\u2014the *supertype* of all *types* (including itself). 3. the *name* of the *superclass* of all *classes* except itself. \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n(Interpretation of Tokens). \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*composite stream* that receives its input from an associated *input stream* and sends its output to an associated *output stream*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nthis internally, and some situations involving *type specifiers* are most easily described in terms of a fully expanded *type specifier* .) \n\n\n\n \n\n\n\n**U** \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*function* but which is not *bound* in the *function namespace*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n*registry*. An *unregistered package* has no *name*; *i.e.*, its *name* is **nil**. See the *function* **delete-package**. \n\n\n\n \n\n\n\ncontext as *unsafe* means that certain kinds of error checking are not reliably enabled but does not guarantee that error checking is definitely disabled.) \n\n\n\n \n\n\n\n \n\n\n\nto substitute an *actual array element type* for an *expressed array element type* \n\n\n\nwhen choosing an appropriately *specialized array* representation. See the *function* **upgraded-array-element-type**. 2. (when creating a *complex* ) to substitute an *actual complex part type* for an *expressed complex part type* when choosing an appropriately *specialized complex* representation. See the *function* **upgraded-complex-part-type**. \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**V** \n\n\n\n \n\n\n\nSuch a *fixnum* must be greater than or equal to zero, and less than the *value* of **array-dimension-limit**. When multiple *array dimensions* are to be used together to specify a multi-dimensional *array*, there is also an implied constraint that the product of all of the *dimensions* be less than the *value* of **array-total-size-limit**. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n:unspecific, or **nil**. The symbols :oldest, :previous, and :installed are *semi* \n\n\n\n*standard* special version symbols. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\nseveral *objects* that result from the *evaluation* of the last *form*, or **nil** if there are no *forms*. 2. an *object* associated with a *name* in a *binding*. 3. (of a *symbol*) the *value* of the *dynamic variable* named by that symbol. 4. an *object* associated with a *key* in an *association list*, a *property list*, or a *hash table*. \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n**W** \n\n\n\n \n\n\n\n<i>syntax type</i><sub>2</sub>. c. <i>n.</i> a <i>whitespace</i><sub>2<i>b</i></sub> character . \n\n\n\n \n\n\n\npossibly several *pathnames*, and which can therefore be used to refer to the aggregate of the *files* named by those *pathnames*. The set of *wild pathnames* includes, but is not restricted to, *pathnames* which have a component which is :wild, or which have a directory component which contains :wild or :wild-inferors. See the *function* **wild-pathname-p**. \n\n\n\n \n\n\n\n \n\n\n\n**Y**"], ["./output//chap-26/cg-b-glossary/r.md", "**Figure 26\u20134. Standardized Restart Functions**"], ["./output//chap-26/cg-b-glossary/e.md", "**Figure 26\u20131. Exponent Markers**"]]